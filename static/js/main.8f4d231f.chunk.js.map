{"version":3,"sources":["components/MasonryList.tsx","data.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TileColumn","useStyles","makeStyles","theme","createStyles","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","MasonryList","props","tiles","classes","className","GridList","cellHeight","cols","map","tile","GridListTile","src","img","alt","title","author","App","Container","Box","m","Typography","variant","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKAqBKA,E,gHAhBCC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBP,EAAMQ,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,W,SAMRf,O,aAAAA,I,cAAAA,M,KAgBL,IAiBegB,EAjBK,SAACC,GAA8B,IACzCC,EAAUD,EAAVC,MACFC,EAAUlB,IAEhB,OACE,qBAAKmB,UAAWD,EAAQd,KAAxB,SACE,cAACgB,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAWD,EAAQL,SAAUS,KAAM,EAA9D,SACGL,EAAMM,KAAI,SAACC,GAAD,OACT,cAACC,EAAA,EAAD,CAA6BH,KAAME,EAAKF,MAAQ,EAAhD,SACE,qBAAKI,IAAG,kBAAaF,EAAKG,KAAOC,IAAKJ,EAAKK,SAD1BL,EAAKG,aC8BnBV,EA3ED,CACZ,CACEU,IAAK,iBACLE,MAAO,YACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,eACLE,MAAO,UACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,cACLE,MAAO,SACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,eACLE,MAAO,UACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,YACLE,MAAO,OACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,aACLE,MAAO,QACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,kBACLE,MAAO,aACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,aACLE,MAAO,QACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,gBACLE,MAAO,WACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,aACLE,MAAO,QACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,YACLE,MAAO,OACPC,OAAQ,SACRR,KAAM,GAER,CACEK,IAAK,YACLE,MAAO,OACPC,OAAQ,SACRR,KAAM,IC/CKS,MAlBf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,eAACa,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAnC,0DAIF,kCACE,cAAC,EAAD,CAAapB,MAAOA,MAEtB,iCCJOqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f4d231f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"space-around\",\n      overflow: \"hidden\",\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      width: 500,\n      // height: 450,\n    },\n  })\n);\n\nenum TileColumn {\n  One = 1,\n  Two = 2,\n}\n\ninterface ITile {\n  img: string;\n  title: string;\n  author: string;\n  cols: TileColumn;\n}\n\ninterface IMasonryListProps {\n  tiles: ITile[];\n}\n\nconst MasonryList = (props: IMasonryListProps) => {\n  const { tiles } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\n        {tiles.map((tile) => (\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\n            <img src={`/images/${tile.img}`} alt={tile.title} />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n};\n\nexport default MasonryList;\n","const tiles = [\n  {\n    img: \"breakfast.jpeg\",\n    title: \"breakfast\",\n    author: \"author\",\n    cols: 2,\n  },\n  {\n    img: \"burgers.jpeg\",\n    title: \"burgers\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"camera.jpeg\",\n    title: \"camera\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"morning.jpeg\",\n    title: \"morning\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"hats.jpeg\",\n    title: \"hats\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"honey.jpeg\",\n    title: \"honey\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"vegetables.jpeg\",\n    title: \"vegetables\",\n    author: \"author\",\n    cols: 2,\n  },\n  {\n    img: \"plant.jpeg\",\n    title: \"plant\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"mushroom.jpeg\",\n    title: \"mushroom\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"olive.jpeg\",\n    title: \"olive\",\n    author: \"author\",\n    cols: 1,\n  },\n  {\n    img: \"star.jpeg\",\n    title: \"star\",\n    author: \"author\",\n    cols: 2,\n  },\n  {\n    img: \"bike.jpeg\",\n    title: \"bike\",\n    author: \"author\",\n    cols: 1,\n  },\n];\n\nexport default tiles;\n","import { Box, Container, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./App.css\";\nimport MasonryList from \"./components/MasonryList\";\nimport tiles from \"./data\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Box m={3}>\n          <Typography variant=\"h2\" component=\"h1\">\n            Getting Started with Image Engine in React\n          </Typography>\n        </Box>\n        <section>\n          <MasonryList tiles={tiles} />\n        </section>\n        <footer></footer>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}